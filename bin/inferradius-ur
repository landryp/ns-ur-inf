#!/usr/bin/python
__doc__ = 'INFERRADIUS -- use canonical tidal deformability constraint to infer radius of target neutron star via universal relations'
__usage__ = 'inferradius nsname path/to/Lambda14/prior/samples path/to/m/prior/samples [-v] [-n 1e4] [-o ./]'
__author__ = 'philippe.landry@ligo.org'
__date__ = '09-2019'

import numpy as np
from optparse import OptionParser
from nsurinf.ur import *
from nsurinf.likelihoods import *
from random import sample
from numpy.random import choice

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-n', '--numsamps', default=1e4, help='maximum number of samples to use for Monte-Carlo integration, DEFAULT=1e4', metavar='MAX_NUM_SAMPS')
parser.add_option('-o', '--outdir', default='./', help='path to output directory, DEFAULT=./', metavar='PATH/TO/OUTDIR')
parser.add_option('-u', '--urs', default='CLove_YY16,CanonBiLove_KL19', help='comma-separated names of universal relations fits and errors to use, DEFAULT="CLove_YY16,CanonBiLove_KL19"', metavar='UR1,UR2')
parser.add_option('-v', '--verbose', action='store_true', default=False, help='toggle verbose output, DEFAULT=False', metavar='False')

opts, args = parser.parse_args()
nsname = str(args[0])
L14prior_path = str(args[1])
mprior_path = str(args[2])
nsamps = int(float(opts.numsamps))
outdir = str(opts.outdir)
urs = str(opts.urs)
urs = urs.split(',')
verb = opts.verbose

# SELECT UNIVERSAL RELATION FITS AND ERRORS TO USE

CofLambda = eval(urs[0])
LambdaofmLambda14 = eval(urs[1])

if verb: print 'Selected URs {0}, {1}'.format(str(CofLambda),str(LambdaofmLambda14))

# LOAD PRIOR SAMPLES

L14prior = np.genfromtxt(L14prior_path,names=True,delimiter=',',dtype=None)['Lambda14']
mprior = np.genfromtxt(mprior_path,names=True,delimiter=',',dtype=None)['m']

minlen = len(mprior)
num = min(minlen,nsamps)

if num != nsamps:
	print 'Infsufficient number of prior samples available; sampling with replacement'
	num = nsamps

L14samps = choice(L14prior,size=num)
msamps = choice(mprior,size=num)

if verb: print 'Loading Lambda14 prior samples from {0} and m prior samples from {1}'.format(str(L14prior_path),str(mprior_path))

# IMPLEMENT COMPOSITE LIKELIHOOD FOR C AND R AS A FUNCTION OF PRIOR VARIABLES

def LofmLambda14(m,Lambda14):

	Lambda = tiddef(m,Lambda14,LambdaofmLambda14)

	return Lambda

def CofmLambda14(m,Lambda14,CofLambda):

	Lambda = tiddef(m,Lambda14,LambdaofmLambda14)
	C = CofLambda(Lambda)

	return C

def RofmLambda14(m,Lambda14,CofLambda):

	Lambda = tiddef(m,Lambda14,LambdaofmLambda14)
	C = CofLambda(Lambda)
	R = radius(m,C)

	return R

# PERFORM INFERENCE

if verb: print 'Inferring radius for {0}'.format(nsname)

Lpost = []
Cpost = []
Rpost = []
for count in range(num):

	L14 = L14samps[count]
	m = msamps[count]			

	L = LofmLambda14(m,L14)
	C = CofLambda(L)
	R = radius(m,C)
	Lpost.append(L)
	Cpost.append(C)
	Rpost.append(R)

# SAVE POSTERIOR DATA

post = zip(msamps,L14samps,Lpost,Cpost,Rpost)
outfile = outdir+nsname+"_radius.csv"

if verb: print 'Saving radius posterior samples for {0} to {1}'.format(nsname,outfile)

np.savetxt(outfile,post,fmt='%.6e',delimiter=',',header='m,Lambda14,Lambda,C,R',comments='')


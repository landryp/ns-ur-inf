#!/usr/bin/python
__doc__ = 'PLOTHIST -- plot histogram from csv files file1.csv, file2.csv, ... '
__usage__ = 'plothist file1.csv,file2.csv,... [-x COLUMN_NAME] [-l XMIN,XMAX,YMIN,YMAX] [-d PATH/TO/FILE_LIST] [-o PATH/TO/FILE_DIR]'
__author__ = 'philippe.landry@ligo.org'
__date__ = '05-2019'

import numpy as np
from optparse import OptionParser
from nsstruc.pltsetup import *
from matplotlib.lines import Line2D

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-x', '--xcol', default=False, help='which column to plot on x-axis, DEFAULT=FIRST_COLUMN', metavar='COLUMN_NAME')
parser.add_option('-l', '--lims', default=False, help='x and y ranges for plot, DEFAULT=AUTO', metavar='XMIN,XMAX,YMIN,YMAX')
parser.add_option('-A', '--axislabels', default=False, help='x and y axis labels, DEFAULT=XCOLUMN_NAME,YCOLUMN_NAME1', metavar='XLABEL,YLABEL')
parser.add_option('-L', '--logaxis', default='False,False', help='whether x and y axes should be log-scaled, DEFAULT=False,False', metavar='XBOOL,YBOOL')
parser.add_option('-k', '--key', action='store_false', default=True, help='toggle legend/key display, DEFAULT=True', metavar='BOOL')
parser.add_option('-a', '--alpha', default=1., help='transparency of plotted curves, DEFAULT=1.', metavar='ALPHA')
parser.add_option('-d', '--dir', default='./', help='input directory path, DEFAULT="./"', metavar='PATH/TO/DIR/')
parser.add_option('-o', '--outdir', default='./', help='output directory path, DEFAULT="./"', metavar='PATH/TO/DIR')
parser.add_option('-f', '--outfile', default='hist', help='plot basename for save, DEFAULT="hist"', metavar='PLOTNAME')
parser.add_option('-t', '--tag', default='', help='tag to append to plot basename, DEFAULT=NONE', metavar='-TAG')
parser.add_option('-c', '--cutoff', default=False, help='cutoff data at line number, DEFAULT=NONE', metavar='LINE_NUM')
parser.add_option('-b', '--numbins', default=10, help='number of histogram bins to use, DEFAULT=10', metavar='NUM_BINS')
parser.add_option('-O', '--overlay', default=False, help='overlay vertical lines, DEFAULT=False', metavar='XVAL1+XVAL2,XVAL3,...')
parser.add_option('-s', '--overstyles', default=None, help='style for overlaid vertical lines, DEFAULT=None', metavar='COLOR1+LS1+LBL1,COLOR2+LS2+LBL2,...')
parser.add_option('-D', '--delim', default=',', help='delimiter in data file, DEFAULT=","', metavar='DELIM')

opts, args = parser.parse_args()
filenames = str(args[0]).split(',')
xvar = opts.xcol
if xvar: xvar=str(xvar)
lims = opts.lims
if lims:
	lims = str(opts.lims).split(',')
	lims = [float(lim) for lim in lims]
labels = opts.axislabels
if labels: labels = str(labels).split(',')
logaxis = str(opts.logaxis).split(',')
logaxis = [not logax == 'False' for logax in logaxis]
key = opts.key
alph = float(opts.alpha)
indir = str(opts.dir)
outdir = str(opts.outdir)
pltname = str(opts.outfile)
tag = str(opts.tag)
cutoff = opts.cutoff
if cutoff: lastline=int(cutoff)-1
numbins = int(opts.numbins)
overlay = opts.overlay
if overlay: lines = str(overlay).split(',')
overstyles = str(opts.overstyles)
styles = overstyles.split(',')
delim = str(opts.delim)

# SET UP FIGURE

plt.figure(1)
if lims:
	plt.xlim(lims[0],lims[1])
	plt.ylim(lims[2],lims[3])
if logaxis[0]: plt.xscale('log')
if logaxis[1]: plt.yscale('log')

# READ CSV DATA FROM EACH FILE
j = 0
for fname in filenames:

	shortname = (fname.split('/')[-1]).split('_')[0]
	fpath = indir+fname
	fdat = np.genfromtxt(fpath,names=True,delimiter=delim)
	if not xvar: xvar = fdat.dtype.names[0]
	if not labels:	labels = [xvar,'']
	if not lims:	lims = [min(fdat[xvar]), max(fdat[xvar])]
	plt.xlabel(labels[0])
	plt.ylabel(labels[1])
	
	if alph != 1.: lc = AUTO_COLORS[0]
	else: lc = AUTO_COLORS[j]
	
# PLOT DATA

	i = 0
	clines = []
	clabels = []
	style = AUTO_LINESTYLES[i%len(AUTO_LINESTYLES)]
	if i==0: lb = shortname
	else: lb = None
		
	
	if cutoff:
		
		plt.hist([datum for datum in fdat[xvar][:lastline] if datum == datum],np.linspace(lims[0],lims[1],numbins),normed=True,label=lb,facecolor=lc,alpha=alph)
		
	else:
				
		plt.hist([datum for datum in fdat[xvar] if datum == datum],np.linspace(lims[0],lims[1],numbins),normed=True,label=lb,facecolor=lc,alpha=alph,histtype='step',lw=2.5)
		
		i = i+1
	
	clines.append(Line2D([0],[0],color=lc,lw=3,ls=style))
	clabels.append(lb)
	j = j+1
	
if overlay:
	for k in range(len(lines)):
		line = lines[k].split('+')
		clr, lns, lbl = styles[k].split('+')
		clines.append(Line2D([0],[0],color=AUTO_COLORS[int(clr)],lw=1.5,ls=lns))
		clabels.append(lbl)
		for ln in line:
			plt.axvline(x=float(ln),ls=lns,color=AUTO_COLORS[int(clr)],lw=1.5)
if key: plt.legend(clines,clabels,loc=0)
plt.savefig(outdir+pltname+tag+'.png')


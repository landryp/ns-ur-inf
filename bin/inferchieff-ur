#!/usr/bin/python
__doc__ = 'INFERCHIEFF -- use canonical tidal deformability constraint to infer effective dimensionless spin of target binary neutron star via universal relations'
__usage__ = 'inferspin nsname path/to/Lambda14/prior/samples path/to/m1/prior/samples path/to/m2/prior/samples path/to/f1/prior/samples path/to/f2/prior/samples path/to/costheta1/prior/samples path/to/costheta2/prior/samples [-v] [-n 1e4] [-o ./]'
__author__ = 'philippe.landry@ligo.org'
__date__ = '07-2019'

import numpy as np
from optparse import OptionParser
from nsurinf.ur import *
from nsurinf.likelihoods import *
from random import sample
from numpy.random import choice

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-n', '--numsamps', default=1e4, help='maximum number of samples to use for Monte-Carlo integration, DEFAULT=1e4', metavar='MAX_NUM_SAMPS')
parser.add_option('-o', '--outdir', default='./', help='path to output directory, DEFAULT=./', metavar='PATH/TO/OUTDIR')
parser.add_option('-u', '--urs', default='IbarLove_YY16,CanonBiLove_KL19', help='comma-separated names of universal relations fits and errors to use, DEFAULT="IbarLove_YY16,CanonBiLove_KL19"', metavar='UR1,UR2')
parser.add_option('-v', '--verbose', action='store_true', default=False, help='toggle verbose output, DEFAULT=False', metavar='False')
parser.add_option('-s', '--spincorr', action='store_true', default=False, help='toggle spin corrections to moment of inertia, DEFAULT=False')

opts, args = parser.parse_args()
nsname = str(args[0])
L14prior_path = str(args[1])
m1prior_path = str(args[2])
m2prior_path = str(args[3])
f1prior_path = str(args[4])
f2prior_path = str(args[5])
costheta1prior_path = str(args[6])
costheta2prior_path = str(args[7])
nsamps = int(float(opts.numsamps))
outdir = str(opts.outdir)
urs = str(opts.urs)
urs = urs.split(',')
verb = opts.verbose
spin_corr = opts.spincorr

# SELECT UNIVERSAL RELATION FITS AND ERRORS TO USE

IbarofLambda = eval(urs[0])
LambdaofmLambda14 = eval(urs[1])

if spin_corr: dI_spin = eval('moicorr_B13')

if verb: print 'Selected URs {0}, {1}'.format(str(IbarofLambda),str(LambdaofmLambda14))

# LOAD PRIOR SAMPLES

L14prior = np.genfromtxt(L14prior_path,names=True,delimiter=',',dtype=None)['Lambda14']
m1prior = np.genfromtxt(m1prior_path,names=True,delimiter=',',dtype=None)['m']
m2prior = np.genfromtxt(m2prior_path,names=True,delimiter=',',dtype=None)['m']
f1prior = np.genfromtxt(f1prior_path,names=True,delimiter=',',dtype=None)['f']
f2prior = np.genfromtxt(f2prior_path,names=True,delimiter=',',dtype=None)['f']
costheta1prior = np.genfromtxt(costheta1prior_path,names=True,delimiter=',',dtype=None)['costheta']
costheta2prior = np.genfromtxt(costheta2prior_path,names=True,delimiter=',',dtype=None)['costheta']

minlen = min(len(m1prior),len(m2prior),len(f1prior),len(f2prior),len(costheta1prior),len(costheta2prior))
num = min(minlen,nsamps)

if num != nsamps:
	print 'Infsufficient number of prior samples available; sampling with replacement'
	num = nsamps

L14samps = choice(L14prior,size=num)
m_index = choice(range(min(len(m1prior),len(m2prior))),size=num)
m1samps = [m1prior[index] for index in m_index]
m2samps = [m2prior[index] for index in m_index]
f1samps = choice(f1prior,size=num)
f2samps = choice(f2prior,size=num)
costheta1samps = choice(costheta1prior,size=num)
costheta2samps = choice(costheta2prior,size=num)

if verb: print 'Loading Lambda14 prior samples from {0}, m prior samples from {1} & {2}, f prior samples from {3} & {4} and costheta prior samples from {5} & {6}'.format(str(L14prior_path),str(m1prior_path),str(m2prior_path),str(f1prior_path),str(f2prior_path),str(costheta1prior_path),str(costheta2prior_path))

# IMPLEMENT COMPOSITE LIKELIHOOD FOR MOI AND SPIN AS A FUNCTION OF PRIOR VARIABLES

def IofmLambda14(m,Lambda14):

	Lambda = tiddef(m,Lambda14,LambdaofmLambda14)
	I = dimmoi(m,moibar(Lambda,IbarofLambda))

	return I

def chiofmLambda14f(m,Lambda14,f):

	Lambda = tiddef(m,Lambda14,LambdaofmLambda14)
	I = dimmoi(m,moibar(Lambda,IbarofLambda))
	chi = spin(f,m,I)

	return chi
	
def chieffofm12Lambda14f12costheta12(m1,m2,Lambda14,f1,f2,costheta1,costheta2):

	Lambda1 = tiddef(m1,Lambda14,LambdaofmLambda14)
	Lambda2 = tiddef(m2,Lambda14,LambdaofmLambda14)
	I1 = dimmoi(m1,moibar(Lambda1,IbarofLambda))
	I2 = dimmoi(m2,moibar(Lambda2,IbarofLambda))
	chi1 = spin(f1,m1,I1)
	chi2 = spin(f2,m2,I2)
	chieff = effspin(chi1,m1,costheta1,chi2,m2,costheta2)

	return chieff

# PERFORM INFERENCE

if verb: print 'Inferring effective spin for {0}'.format(nsname)

chieffpost = []
chi1post = []
chi2post = []
I1post = []
I2post = []
qsamps = []
for count in range(num):

	L14 = L14samps[count]
	m1 = m1samps[count]
	m2 = m2samps[count]
	f1 = f1samps[count]
	f2 = f2samps[count]
	costheta1 = costheta1samps[count]
	costheta2 = costheta2samps[count]
	
	q = min(m1,m2)/max(m1,m2) # we are enforcing q < 1 b/c m2 need not be < m1 for PSRs
	qsamps.append(q)			

	I1 = IofmLambda14(m1,L14)
	I2 = IofmLambda14(m2,L14)
	if spin_corr:
		I1 = I1 + dI_spin(m1,f1,I1)
		I2 = I2 + dI_spin(m2,f2,I2)
	chi1 = spin(f1,m1,I1)
	chi2 = spin(f2,m2,I2)
	chieff = effspin(chi1,m1,costheta1,chi2,m2,costheta2)
	I1post.append(I1)
	I2post.append(I2)
	chi1post.append(chi1)
	chi2post.append(chi2)
	chieffpost.append(chieff)

# SAVE POSTERIOR DATA

post = zip(m1samps,m2samps,qsamps,L14samps,f1samps,f2samps,costheta1samps,costheta2samps,I1post,I2post,chi1post,chi2post,chieffpost)
outfile = outdir+nsname+"_chieff.csv"

if verb: print 'Saving effective spin posterior samples for {0} to {1}'.format(nsname,outfile)

np.savetxt(outfile,post,fmt='%.6e',delimiter=',',header='m1,m2,q,Lambda14,f1,f2,costheta1,costheta2,I1,I2,chi1,chi2,chieff',comments='')


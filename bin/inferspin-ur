#!/usr/bin/python
__doc__ = 'INFERSPIN -- use canonical tidal deformability constraint to infer dimensionless spin of target neutron star via universal relations'
__usage__ = 'inferspin nsname path/to/Lambda14/prior/samples path/to/m/prior/samples path/to/f/prior/samples [-v] [-n 1e4] [-o ./]'
__author__ = 'philippe.landry@ligo.org'
__date__ = '07-2019'

import numpy as np
from optparse import OptionParser
from nsurinf.ur import *
from nsurinf.likelihoods import *
from random import sample

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-n', '--numsamps', default=1e4, help='maximum number of samples to use for Monte-Carlo integration, DEFAULT=1e4', metavar='MAX_NUM_SAMPS')
parser.add_option('-o', '--outdir', default='./', help='path to output directory, DEFAULT=./', metavar='PATH/TO/OUTDIR')
parser.add_option('-u', '--urs', default='IbarLove_YY16,CanonBiLove_KL19', help='comma-separated names of universal relations fits and errors to use, DEFAULT="IbarLove_YY16,CanonBiLove_KL19"', metavar='UR1,UR2')
parser.add_option('-v', '--verbose', action='store_true', default=False, help='toggle verbose output, DEFAULT=False', metavar='False')
parser.add_option('-s', '--spincorr', action='store_true', default=False, help='toggle spin corrections to moment of inertia, DEFAULT=False')

opts, args = parser.parse_args()
nsname = str(args[0])
L14prior_path = str(args[1])
mprior_path = str(args[2])
fprior_path = str(args[3])
nsamps = int(float(opts.numsamps))
outdir = str(opts.outdir)
urs = str(opts.urs)
urs = urs.split(',')
verb = opts.verbose
spin_corr = opts.spincorr

# SELECT UNIVERSAL RELATION FITS AND ERRORS TO USE

IbarofLambda = eval(urs[0])
LambdaofmLambda14 = eval(urs[1])

if spin_corr: dI_spin = eval('moicorr_B13')

if verb: print 'Selected URs {0}, {1}'.format(str(IbarofLambda),str(LambdaofmLambda14))

# LOAD PRIOR SAMPLES

L14prior = np.genfromtxt(L14prior_path,names=True,delimiter=',',dtype=None)['Lambda14']
mprior = np.genfromtxt(mprior_path,names=True,delimiter=',',dtype=None)['m']
fprior = np.genfromtxt(fprior_path,names=True,delimiter=',',dtype=None)['f']

minlen = min(len(L14prior),len(mprior),len(fprior))
num = min(minlen,nsamps)

L14samps = sample(L14prior,num)
msamps = sample(mprior,num)
fsamps = sample(fprior,num)

if verb: print 'Loading Lambda14 prior samples from {0}, m prior samples from {1} and f prior samples from {2}'.format(str(L14prior_path),str(mprior_path),str(fprior_path))

# IMPLEMENT COMPOSITE LIKELIHOOD FOR MOI AND SPIN AS A FUNCTION OF PRIOR VARIABLES

def IofmLambda14(m,Lambda14):

	Lambda = tiddef(m,Lambda14,LambdaofmLambda14)
	I = dimmoi(m,moibar(Lambda,IbarofLambda))

	return I

def chiofmLambda14f(m,Lambda14,f):

	Lambda = tiddef(m,Lambda14,LambdaofmLambda14)
	I = dimmoi(m,moibar(Lambda,IbarofLambda))
	chi = spin(f,m,I)

	return chi

# PERFORM INFERENCE

if verb: print 'Inferring spin for {0}'.format(nsname)

chipost = []
Ipost = []
for count in range(num):

	L14 = L14samps[count]
	m = msamps[count]
	f = fsamps[count]			

	I = IofmLambda14(m,L14)
	if spin_corr:
		dI = dI_spin(m,f,I)
		print I, dI
		newI = I + dI
		I = newI
	chi = spin(f,m,I)
	Ipost.append(I)
	chipost.append(chi)

# SAVE POSTERIOR DATA

post = zip(msamps,L14samps,fsamps,Ipost,chipost)
outfile = outdir+nsname+"_spin.csv"

if verb: print 'Saving spin posterior samples for {0} to {1}'.format(nsname,outfile)

np.savetxt(outfile,post,fmt='%.6e',delimiter=',',header='m,Lambda14,f,I,chi',comments='')


#!/usr/bin/python
__doc__ = 'INFERPROPS -- use canonical tidal deformability constraint to infer properties of target neutron star via universal relations'
__usage__ = 'inferprops nsname [-v] [-p I,chi] [-n 1e4] [-D genbetaprime,gaussian,gaussian] [-P 1.+0.934305+2.85628+191.509,1.33+0.09,277.8+1e-6] [-o ./dat/]'
__author__ = 'philippe.landry@ligo.org'
__date__ = '07-2019'

import numpy as np
from optparse import OptionParser
from numpy.random import uniform
from numpy.random import randint
from nsurinf.distributions import *
from nsurinf.universalrelationfits import *
from nsurinf.universalrelationerror import *

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-p', '--props', default='I,chi', help='properties to infer, DEFAULT="I,chi"', metavar='PROP1,PROP2,...')
parser.add_option('-D', '--priors', default='genbetaprime,gaussian,gaussian', help='type(s) of prior distributions to use from among [samples, gaussian, uniform, genbetaprime, truncated], DEFAULT="gaussian,gaussian"', metavar='DISTR1,DISTR2,...')
parser.add_option('-P', '--params', default='1.+0.934305+2.85628+191.509,1.33+0.09,277.8+1e-6', help='input parameters for prior distributions from among [/path/to/file.csv, mean+std, min+max, p+q+alpha+beta, mean+std+ub], DEFAULT="1.+0.934305+2.85628+191.509,1.33+0.09,277.8+1e-6"', metavar='PRIOR1_P1+PRIOR1_P2,PRIOR2_P1,...')
parser.add_option('-s', '--samplecols', default='m1_source,a1', help='column names for prior data from samples file, DEFAULT="m1_source,a1"', metavar='NAME1,NAME2,...')
parser.add_option('-n', '--numsamps', default=1e4, help='number of samples to use for Monte-Carlo integration, DEFAULT=1e4', metavar='NUM_SAMPS')
parser.add_option('-o', '--outdir', default='./dat/', help='path to output directory, DEFAULT=./dat/', metavar='PATH/TO/OUTDIR')
parser.add_option('-t', '--tag', default='_props', help='tag for output data file NSNAME_TAG.csv, DEFAULT=_props', metavar='_TAG')
parser.add_option('-v', '--verbose', action='store_true', default=False, help='toggle verbose output, DEFAULT=False', metavar='False')

opts, args = parser.parse_args()
nsname = str(args[0])
propsin = str(opts.props)
props = propsin.split(',')
priorsin = str(opts.priors)
priors = priorsin.split(',')
paramsin = str(opts.params)
params = paramsin.split(',')
nsamps = float(opts.numsamps)
nsamps = int(nsamps)
outdir = str(opts.outdir)
colsin = str(opts.samplecols)
cols = colsin.split(',')
tag = str(opts.tag)
verb = opts.verbose

ur = {'R': RLove,'I': ILove,'Lambda': CanonBiLove,'C': CLove,'chi': chiLove,'Omega': OmegaLove}
priorkeys = {'R': "Lambda_14,M",'I': "Lambda_14,M",'Lambda': "Lambda_14,M",'C': "Lambda_14,M",'chi': "Lambda_14,M,Omega",'Omega': "Lambda_14,M,chi"}
distrkeys = {'gaussian': posnormal, 'uniform': uniform, 'genbetaprime': genbetaprime, 'truncated': truncnormal}
priorvars = [priorkeys[var].split(',') for var in props]
priorlist = []
for var in priorvars:
	for subvar in var:
		if subvar not in priorlist: priorlist.append(subvar)

outfile = open(outdir+nsname+tag+".csv","w")
outfile.write(','.join(priorlist)+','+propsin+'\n')

# SAMPLE FROM INPUT PRIORS ON LAMBDA_14, M, ETC.

priorsamps = []
outinds = []
j = 0
for i in range(len(priorlist)):

	priorvar = priorlist[i]
	distr = priors[i]
	param = params[i]
	paramlist = param.split('+')
	
	if distr == 'samples':
	
		if verb: print 'Sampling from {0} prior distribution, given as discrete samples'.format(priorvar)
	
		col = cols[j]
		path = paramlist[0]
		insamps = np.genfromtxt(path,delimiter=',',names=True, dtype=None)
		if outinds != [] and path==prevpath:
			outinds = outinds
		else:
			outinds = randint(0,len(insamps[col]),size=nsamps)
		outsamps = [insamps[col][ind] for ind in outinds]	
		priorsamps.append(outsamps)
		
		prevpath = path
		j = j+1
		
	else:
	
		if verb: print 'Sampling from {0} prior distribution, given as {1}'.format(priorvar,distr)
	
		paramlist = [float(paramval) for paramval in paramlist]
		outsamps = distrkeys[distr](*paramlist,num=nsamps)
		priorsamps.append(outsamps)

# PERFORM BAYESIAN INFERENCE OF PROPERTIES VIA MONTE-CARLO INTEGRATION

if verb: print 'Performing Monte-Carlo integration with {0} samples'.format(nsamps)

for samp in range(nsamps):

	sampslist = []
	sampslist.append(priorsamps[priorlist.index('M')][samp])
	sampslist.append(priorsamps[priorlist.index('Lambda_14')][samp])
	priortmp = [item for item in priorlist if item != 'M' and item != 'Lambda_14']
	for tmp in priortmp:
		sampslist.append(priorsamps[priorlist.index(tmp)][samp])
	
	propvals = []
	for prop in props:
	
		propval = ur[prop](*sampslist)
		propvals.append(propval)
		
	propvalsout = ['{0:.3e}'.format(item) for item in propvals]
	
	outfile.write('{1:.3e},{0:.6f},{2:.6f},'.format(*sampslist)+','.join(propvalsout)+'\n')

if verb:	print 'Done Monte-Carlo integration'


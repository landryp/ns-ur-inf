#!/usr/bin/python
__doc__ = 'CALCINTERVALS -- calculate confidence intervals for properties of specified neutron star'
__usage__ = 'calcintervals nsprops.csv [-v] [-p R,I,Lambda,C,chi] [-L 0.9] [-d ./dat/] [-o ./dat/]'
__author__ = 'philippe.landry@ligo.org'
__date__ = '04-2019'

import numpy as np
from numpy.random import normal
from optparse import OptionParser
from nsurinf.statistics import *

parser = OptionParser(usage=__usage__, description=__doc__)
parser.add_option('-p', '--props', default='R,I,Lambda,C,chi', help='properties to infer, DEFAULT="R,I,Lambda,C,chi"', metavar='PROP1,PROP2')
parser.add_option('-L', '--clevel', default=0.9, help='confidence level to calculate interval for, DEFAULT=0.9', metavar='CONF_LEVEL')
parser.add_option('-n', '--numpts', default=1e3, help='number of points to use for numerical integration of likelihoods, DEFAULT=1e3', metavar='NUM_PTS')
parser.add_option('-d', '--dir', default='./dat/', help='path to directory housing universal relations fits, DEFAULT=./dat/', metavar='PATH/TO/DIR')
parser.add_option('-o', '--outdir', default='./dat/', help='path to output directory, DEFAULT=./dat/', metavar='PATH/TO/OUTDIR')
parser.add_option('-t', '--tag', default='_CI', help='tag for output data file NSNAME_TAG.csv, DEFAULT=_CI', metavar='_TAG')
parser.add_option('-v', '--verbose', action='store_true', default=False, help='toggle verbose output, DEFAULT=False', metavar='False')

opts, args = parser.parse_args()
filename = str(args[0])
nsname = filename.split('_')[0]
props = str(opts.props)
props = props.split(',')
cl = 1.-float(opts.clevel)
npts = float(opts.numpts)
npts = int(npts)
indir = str(opts.dir)
outdir = str(opts.outdir)
tag = str(opts.tag)
verb = opts.verbose

outfile = open(outdir+nsname+tag+".csv","w")
outfile.write('prop,lb,cen,ub,prob \n')

# LOAD SAMPLES FROM NEUTRON STAR PROPERTIES' DISTRIBUTIONS

if verb:	print 'Loading posterior samples for properties of {0}'.format(nsname)

sampdat = np.genfromtxt(indir+'/'+filename,names=True,delimiter=',',dtype=None)

# COMPUTE SYMMETRIC CONFIDENCE INTERVALS ABOUT THE MEDIAN FOR EACH PROPERTY

for prop in props:

	if verb:	print 'Calculating {0}% confidence interval for {1}'.format(100*cl,prop)

	dat = sampdat[prop]
	med = median(dat,npts)
	lb, cen, ub = symci(cl,False,dat,npts) # by default this calcs symmetric CI
	cen = med
	probcheck = kdeprob(dat,npts)
	
	outfile.write('{0},{1},{2},{3},{4} \n'.format(prop,lb,cen,ub,probcheck))
	if verb:	print '{0}% confidence interval for {1} found as {2}+{3}-{4}'.format(100*cl,prop,cen,ub-cen,cen-lb)
	
if verb:	print 'Done confidence intervals'

